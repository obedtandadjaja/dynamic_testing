import json
import unittest
from kit_test_helper import TestHelper
from bit_extension import BitExtension
# selenium stuff
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.by import By
from selenium.webdriver.common.alert import Alert
from selenium.webdriver.support.select import Select

# Kit Receiving
class KitEditTestCase(unittest.TestCase):
	CONST_HOST = None

	def setUp(self):
		self.browser = webdriver.Firefox()

	def prepareTest(self, helper):
		print("***SETTING UP EXISTING DATA IN KIT LIST***")
		helper.insertKitList("SKTEST", "", "", "-2305843009213693952", "0", "1", "EA", "1", "1")
		print("***DONE SETTING UP EXISTING DATA***")

	def runTest(self):
		helper = TestHelper()
		helper.dbEstablishConnection()
		if helper.dbTestConnection() == False:
			return
		self.prepareTest(helper)

		# Tests
		self.testSearch()
		self.testEdit()
		self.testAddNewPP()
		self.testAddNewKit()
		self.testAddSamePP()
		self.testAddSameKit()
		self.testAddNewPPDifferentQtyUOM()
		self.testAddNewKitDifferentQtyUOM()
		self.testAddNewKitDifferentRevision()
		self.testAddNewPPToDifferentRevision(helper)
		self.testAddNewKitToDifferentRevision(helper)
		self.testDeleteLonePP()
		self.testDeleteLoneKit()
		self.testDeletePPMultipleRevision(helper)
		self.testDeleteKitMultipleRevision(helper)
		self.testDeletePPDifferentQtyUOM()
		self.testDeleteKitDifferentQtyUOM()
		self.testUpdateToNewPP(helper)
		self.testUpdateToNewKit(helper)
		self.testUpdateToSamePP(helper)
		self.testUpdateToSameKit(helper)
		self.testUpdateToSamePPDifferentRevision(helper)
		self.testUpdateToSameKitifferentRevision(helper)

		helper.dbCloseConnection()

	def search(self, pn):
		self.browser.get(self.CONST_HOST + "UApplication3/wh/kitrec/kit_list_edit.aspx")
		wait = WebDriverWait(self.browser, 10)
		wait.until(EC.element_to_be_clickable((By.ID, "ctl00_ContentPlaceHolder1_btn_search")))
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_txt_PN").send_keys(str(pn))
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_btn_search").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		wait.until(EC.element_to_be_clickable((By.ID, "ctl00_ContentPlaceHolder1_btn_search")))

	def edit(self, pn, revision_name):
		self.search("SKTEST")
		wait = WebDriverWait(self.browser, 10)
		wait.until(lambda driver: len(self.browser.find_elements_by_css_selector("select#ctl00_ContentPlaceHolder1_ddl_revision option")) > 0)
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_ddl_revision")).select_by_visible_text(str(revision_name))
		wait.until(EC.element_to_be_clickable((By.ID, "ctl00_ContentPlaceHolder1_btn_edit")))
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_btn_edit").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		wait.until(EC.presence_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView")))

	def testSearch(self):
		print("--"*5, "testSearch", "--"*5)
		self.search("SKTEST")
		rows = self.browser.find_elements_by_css_selector("select#ctl00_ContentPlaceHolder1_ddl_revision option")
		self.assertEqual(len(rows), 3, msg="testSearch: number of dropdown option is not 3")
		for row in rows:
			self.assertTrue(any(row.get_attribute("textContent") in s for s in ["A", "B", "C"]))

	def testEdit(self):
		print("--"*5, "testEdit", "--"*5)
		self.edit("SKTEST", "A")
		self.assertTrue(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView").is_displayed())

	def testAddNewPP(self):
		print("--"*5, "testAddNewPP", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addPN").send_keys("PPA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_ddl_addUOM")).select_by_visible_text("EA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addDescription").send_keys("1")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_lb_add").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) > len(rows_before), msg="testAddNewPP: no additional rows added")
		self.assertTrue(rows_now[0].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "PPA")
		self.assertTrue(rows_now[0].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[2].get_attribute("textContent").strip() == "1")
		self.assertTrue(rows_now[0].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[3].get_attribute("textContent").strip() == "EA")
		self.assertTrue(not rows_now[0].find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td input[type='checkbox']").is_selected())
		self.assertTrue(rows_now[0].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[5].get_attribute("textContent").strip() == "1")

	def testAddNewKit(self):
		print("--"*5, "testAddNewKit", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		handles_before = len(self.browser.window_handles)
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addPN").send_keys("SKTEST2")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_ddl_addUOM")).select_by_visible_text("EA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_chk_addIsKit").click()
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl03_ddl_addSubkitRevision")))
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_ddl_addSubkitRevision")).select_by_visible_text("A (New Revision)")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addDescription").send_keys("1")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_lb_add").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) > len(rows_before), msg="testAddNewKit: no additional rows added")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "SKTEST2")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[2].get_attribute("textContent").strip() == "1")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[3].get_attribute("textContent").strip() == "EA")
		self.assertTrue(rows_now[len(rows_now)-1].find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td input[type='checkbox']").is_selected())
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[5].get_attribute("textContent").strip() == "1")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[6].get_attribute("textContent").strip() == "A")
		self.assertTrue(len(self.browser.window_handles) > handles_before, msg="testAddNewKit: modal dialog does not pop up")
		self.browser.switch_to.window(self.browser.window_handles[1])
		self.browser.close()
		self.browser.switch_to.window(self.browser.window_handles[0])

	def testAddSamePP(self):
		print("--"*5, "testAddSamePP", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_txt_addPN").send_keys("PPA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_txt_addQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_ddl_addUOM")).select_by_visible_text("EA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_txt_addDescription").send_keys("This is not the same description")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_lb_add").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) == len(rows_before), msg="testAddSamePP: additional rows added")
		self.assertTrue(rows_now[0].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "PPA")
		self.assertTrue(rows_now[0].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[2].get_attribute("textContent").strip() == "1")
		self.assertTrue(rows_now[0].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[3].get_attribute("textContent").strip() == "EA")
		self.assertTrue(not rows_now[0].find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td input[type='checkbox']").is_selected())
		self.assertTrue(rows_now[0].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[5].get_attribute("textContent").strip() == "1")

	def testAddSameKit(self):
		print("--"*5, "testAddSameKit", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		handles_before = len(self.browser.window_handles)
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_txt_addPN").send_keys("SKTEST2")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_txt_addQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_ddl_addUOM")).select_by_visible_text("EA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_chk_addIsKit").click()
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl04_ddl_addSubkitRevision")))
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_ddl_addSubkitRevision")).select_by_visible_text("A")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_txt_addDescription").send_keys("This is not the same description")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_lb_add").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) == len(rows_before), msg="testAddSameKit: no additional rows added")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "SKTEST2")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[2].get_attribute("textContent").strip() == "1")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[3].get_attribute("textContent").strip() == "EA")
		self.assertTrue(rows_now[len(rows_now)-1].find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td input[type='checkbox']").is_selected())
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[5].get_attribute("textContent").strip() == "1")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[6].get_attribute("textContent").strip() == "A")
		self.assertTrue(len(self.browser.window_handles) == handles_before, msg="testAddSameKit: modal dialog pops up")

	def testAddNewPPDifferentQtyUOM(self):
		print("--"*5, "testAddNewPPDifferentQtyUOM", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_txt_addPN").send_keys("PPA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_txt_addQty").send_keys("2")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_ddl_addUOM")).select_by_visible_text("TN")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_txt_addDescription").send_keys("2")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_lb_add").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) > len(rows_before), msg="testAddNewPPDifferentQtyUOM: additional rows added")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "PPA")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[2].get_attribute("textContent").strip() == "2")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[3].get_attribute("textContent").strip() == "TN")
		self.assertTrue(not rows_now[len(rows_now)-1].find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td input[type='checkbox']").is_selected())
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[5].get_attribute("textContent").strip() == "2")

	def testAddNewKitDifferentQtyUOM(self):
		print("--"*5, "testAddNewKitDifferentQtyUOM", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		handles_before = len(self.browser.window_handles)
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl05_txt_addPN").send_keys("SKTEST2")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl05_txt_addQty").send_keys("2")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl05_ddl_addUOM")).select_by_visible_text("TN")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl05_chk_addIsKit").click()
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl05_ddl_addSubkitRevision")))
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl05_ddl_addSubkitRevision")).select_by_visible_text("A")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl05_txt_addDescription").send_keys("2")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl05_lb_add").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) > len(rows_before), msg="testAddNewKitDifferentQtyUOM: no additional rows added")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "SKTEST2")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[2].get_attribute("textContent").strip() == "2")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[3].get_attribute("textContent").strip() == "TN")
		self.assertTrue(rows_now[len(rows_now)-1].find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td input[type='checkbox']").is_selected())
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[5].get_attribute("textContent").strip() == "2")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[6].get_attribute("textContent").strip() == "A")
		self.assertTrue(len(self.browser.window_handles) == handles_before, msg="testAddNewKitDifferentQtyUOM: modal dialog pops up")

	def testAddNewKitDifferentRevision(self):
		print("--"*5, "testAddNewKitDifferentRevision", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		handles_before = len(self.browser.window_handles)
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl06_txt_addPN").send_keys("SKTEST2")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl06_txt_addQty").send_keys("2")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl06_ddl_addUOM")).select_by_visible_text("TN")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl06_chk_addIsKit").click()
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl06_ddl_addSubkitRevision")))
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl06_ddl_addSubkitRevision")).select_by_visible_text("B (New Revision)")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl06_txt_addDescription").send_keys("2")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl06_lb_add").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) > len(rows_before), msg="testAddNewKitDifferentRevision: no additional rows added")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "SKTEST2")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[2].get_attribute("textContent").strip() == "2")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[3].get_attribute("textContent").strip() == "TN")
		self.assertTrue(rows_now[len(rows_now)-1].find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td input[type='checkbox']").is_selected())
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[5].get_attribute("textContent").strip() == "2")
		self.assertTrue(rows_now[len(rows_now)-1].find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[6].get_attribute("textContent").strip() == "B")
		self.assertTrue(len(self.browser.window_handles) > handles_before, msg="testAddNewKitDifferentRevision: modal dialog does not pop up")
		self.browser.switch_to.window(self.browser.window_handles[1])
		self.browser.close()
		self.browser.switch_to.window(self.browser.window_handles[0])

	def testAddNewPPToDifferentRevision(self, helper):
		print("--"*5, "testAddNewPPToDifferentRevision", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "C")
		handles_before = len(self.browser.window_handles)
		rows_before = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addPN").send_keys("PPA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_ddl_addUOM")).select_by_visible_text("EA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addDescription").send_keys("1")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_lb_add").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		rows_now = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		current_row = self.browser.find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(current_row.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "PPA")
		self.assertTrue(current_row.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[2].get_attribute("textContent").strip() == "1")
		self.assertTrue(current_row.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[3].get_attribute("textContent").strip() == "EA")
		self.assertTrue(not current_row.find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td input[type='checkbox']").is_selected())
		self.assertTrue(current_row.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[5].get_attribute("textContent").strip() == "1")
		self.assertTrue(len(rows_now) == len(rows_before), msg="testAddNewPPFromDifferentRevision: additional rows added")
		for row in rows_now:
			if row.pn == "PPA" and row.qty == 1 and row.uom == "EA":
				self.assertEqual(row.revision, -6917529027641081856, msg="testAddNewPPFromDifferentRevision: not the correct subkit revision we are looking for")
				break

	def testAddNewKitToDifferentRevision(self, helper):
		print("--"*5, "testAddNewKitToDifferentRevision", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "B")
		handles_before = len(self.browser.window_handles)
		rows_before = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addPN").send_keys("SKTEST2")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_ddl_addUOM")).select_by_visible_text("EA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_chk_addIsKit").click()
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl03_ddl_addSubkitRevision")))
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_ddl_addSubkitRevision")).select_by_visible_text("A")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_txt_addDescription").send_keys("1")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl03_lb_add").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		rows_now = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		current_row = self.browser.find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(current_row.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "SKTEST2")
		self.assertTrue(current_row.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[2].get_attribute("textContent").strip() == "1")
		self.assertTrue(current_row.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[3].get_attribute("textContent").strip() == "EA")
		self.assertTrue(current_row.find_element_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td input[type='checkbox']").is_selected())
		self.assertTrue(current_row.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[5].get_attribute("textContent").strip() == "1")
		self.assertTrue(current_row.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[6].get_attribute("textContent").strip() == "A")
		self.assertTrue(len(rows_now) == len(rows_before), msg="testAddNewKitFromDifferentRevision: additional rows added")
		self.assertTrue(len(self.browser.window_handles) == handles_before, msg="testAddNewKitFromDifferentRevision: modal dialog does not pop up")
		for row in rows_now:
			if row.pn == "PPA" and row.qty == 1 and row.uom == "EA" and row.subkit_revision == -9223372036854775808:
				self.assertEqual(row.revision, -4611686018427387904, msg="testAddNewKitFromDifferentRevision: not the correct subkit revision we are looking for")
				break

	def testDeleteLonePP(self):
		print("--"*5, "testDeleteLonePP", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_delete").click()
		wait.until(EC.alert_is_present())
		alert = self.browser.switch_to.alert
		self.assertNotEqual("Could not delete record! Please contact administrator", alert.text)
		alert.accept()
		self.browser.switch_to.window(self.browser.window_handles[0])
		wait.until(lambda driver: len(self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")) < len(rows_before))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) < len(rows_before), msg="testDeleteLonePP: record not deleted")

	def testDeleteLoneKit(self):
		print("--"*5, "testDeleteLoneKit", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_delete").click()
		wait.until(EC.alert_is_present())
		alert = self.browser.switch_to.alert
		self.assertNotEqual("Could not delete record! Please contact administrator", alert.text)
		alert.accept()
		self.browser.switch_to.window(self.browser.window_handles[0])
		wait.until(lambda driver: len(self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")) < len(rows_before))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) < len(rows_before), msg="testDeleteLoneKit: record not deleted")

	def testDeletePPDifferentQtyUOM(self):
		print("--"*5, "testDeletePPDifferentQtyUOM", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl04_imb_delete").click()
		wait.until(EC.alert_is_present())
		alert = self.browser.switch_to.alert
		self.assertNotEqual("Could not delete record! Please contact administrator", alert.text)
		alert.accept()
		self.browser.switch_to.window(self.browser.window_handles[0])
		wait.until(lambda driver: len(self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")) < len(rows_before))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) < len(rows_before), msg="testDeleteLonePP: record not deleted")

	def testDeleteKitDifferentQtyUOM(self):
		print("--"*5, "testDeleteKitDifferentQtyUOM", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_delete").click()
		wait.until(EC.alert_is_present())
		alert = self.browser.switch_to.alert
		self.assertNotEqual("Could not delete record! Please contact administrator", alert.text)
		alert.accept()
		self.browser.switch_to.window(self.browser.window_handles[0])
		wait.until(lambda driver: len(self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")) < len(rows_before))
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) < len(rows_before), msg="testDeleteLoneKit: record not deleted")

	def testDeletePPMultipleRevision(self, helper):
		print("--"*5, "testDeletePPMultipleRevision", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "C")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_delete").click()
		wait.until(EC.alert_is_present())
		alert = self.browser.switch_to.alert
		self.assertNotEqual("Could not delete record! Please contact administrator", alert.text)
		alert.accept()
		self.browser.switch_to.window(self.browser.window_handles[0])
		wait.until(lambda driver: len(self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")) < len(rows_before))
		db_now = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='PPA'")
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) < len(rows_before), msg="testDeleteLonePP: record not deleted")
		self.assertTrue(db_now[0].revision == -9223372036854775808, msg="testDeletePPMultipleRevision: not the revision we are looking for")

	def testDeleteKitMultipleRevision(self, helper):
		print("--"*5, "testDeleteKitMultipleRevision", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "B")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_delete").click()
		wait.until(EC.alert_is_present())
		alert = self.browser.switch_to.alert
		self.assertNotEqual("Could not delete record! Please contact administrator", alert.text)
		alert.accept()
		self.browser.switch_to.window(self.browser.window_handles[0])
		wait.until(lambda driver: len(self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")) < len(rows_before))
		db_now = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='SKTEST2' and subkit_revision=cast(-9223372036854775808 as bigint)")
		rows_now = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		self.assertTrue(len(rows_now) < len(rows_before), msg="testDeleteLonePP: record not deleted")
		self.assertTrue(db_now[0].revision == -9223372036854775808, msg="testDeletePPMultipleRevision: not the revision we are looking for")

	def testUpdateToNewPP(self, helper):
		print("--"*5, "testUpdateToNewPP", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		db_before = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_edit").click()
		wait.until(EC.presence_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").send_keys("PPA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editUOM")).select_by_visible_text("EA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").click()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").send_keys("1")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_update").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		wait.until(lambda driver: self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "PPA")
		db_now = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.assertEqual(len(db_now), len(db_before), msg="testUpdateToNewPP: db now and db before does not equal")
		old = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='SKTEST2'")
		self.assertEqual(len(old), 0, msg="testUpdateToNewPP: old kit did not get deleted")

	def testUpdateToNewKit(self, helper):
		print("--"*5, "testUpdateToNewKit", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		self.edit("SKTEST", "A")
		db_before = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_edit").click()
		wait.until(EC.presence_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").send_keys("SKTEST2")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editUOM")).select_by_visible_text("EA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").click()
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editSubkitRevision")))
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editSubkitRevision")).select_by_index(0)
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").send_keys("1")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_update").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		wait.until(lambda driver: self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "SKTEST2")
		db_now = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.assertEqual(len(db_now), len(db_before), msg="testUpdateToNewKit: db now and db before does not equal")
		old = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='PPA'")
		self.assertEqual(len(old), 0, msg="testUpdateToNewKit: old kit did not get deleted")

	def testUpdateToSamePP(self, helper):
		print("--"*5, "testUpdateToSamePP", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		helper.insertKitList("PPA", "SKTEST", "SKTEST", -9223372036854775808, 0, 1, "EA", "1", "1")
		self.edit("SKTEST", "A")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		while len(rows_before) == 1:
			self.edit("SKTEST", "A")
			rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		db_before = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_edit").click()
		wait.until(EC.presence_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").send_keys("PPA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editUOM")).select_by_visible_text("EA")
		if self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").is_selected():
			self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").click()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").send_keys("1")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_update").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		wait.until(lambda driver: len(self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")) < len(rows_before))
		db_now = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.assertTrue(len(db_now) < len(db_before), msg="testUpdateToSamePP: db now is not less than db before")
		old = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='SKTEST2'")
		self.assertEqual(len(old), 0, msg="testUpdateToSamePP: old kit did not get deleted")

	def testUpdateToSameKit(self, helper):
		print("--"*5, "testUpdateToSameKit", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		helper.insertKitList("SKTEST3", "SKTEST", "SKTEST", -9223372036854775808, -9223372036854775808, 1, "EA", "1", "1")
		self.edit("SKTEST", "A")
		rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		while len(rows_before) == 1:
			self.edit("SKTEST", "A")
			rows_before = self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")
		db_before = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_edit").click()
		wait.until(EC.presence_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").send_keys("SKTEST3")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editUOM")).select_by_visible_text("EA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").click()
		if not self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").is_selected():
			self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").click()
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editSubkitRevision")))
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editSubkitRevision")).select_by_index(0)
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").send_keys("1")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_update").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		wait.until(lambda driver: len(self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody")) < len(rows_before))
		db_now = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.assertTrue(len(db_now) < len(db_before), msg="testUpdateToSameKit: db now is not less than db before")
		old = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='SKTEST2'")
		self.assertEqual(len(old), 0, msg="testUpdateToSameKit: old kit did not get deleted")
		if len(self.browser.window_handles) > 1:
			self.browser.switch_to.window(self.browser.window_handles[1])
			self.browser.close()
			self.browser.switch_to.window(self.browser.window_handles[0])

	def testUpdateToSamePPDifferentRevision(self, helper):
		print("--"*5, "testUpdateToSamePPDifferentRevision", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		helper.insertKitList("PPA", "SKTEST", "SKTEST", 4611686018427387904, 0, 1, "EA", "1", "1")
		self.edit("SKTEST", "A")
		db_before = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='PPA'")
		while len(db_before) != 1:
			db_before = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='PPA'")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_edit").click()
		wait.until(EC.presence_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").send_keys("PPA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editUOM")).select_by_visible_text("EA")
		if self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").is_selected():
			self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").click()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").send_keys("1")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_update").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		wait.until(lambda driver: self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "PPA")
		db_now = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.assertTrue(len(db_now) == len(db_before), msg="testUpdateToSamePPDifferentRevision: db now is not equal than db before")
		current = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='PPA'")
		self.assertTrue(current[0].revision == -4611686018427387904, msg="testUpdateToSamePPDifferentRevision: not the revision we are looking for")

	def testUpdateToSameKitifferentRevision(self, helper):
		print("--"*5, "testUpdateToSameKitifferentRevision", "--"*5)
		wait = WebDriverWait(self.browser, 10)
		helper.insertKitList("SKTEST3", "SKTEST", "SKTEST", 4611686018427387904, -9223372036854775808, 1, "EA", "1", "1")
		self.edit("SKTEST", "A")
		db_before = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='SKTEST3'")
		while len(db_before) != 1:
			db_before = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='SKTEST3'")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_edit").click()
		wait.until(EC.presence_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN")))
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editPN").send_keys("SKTEST3")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editQty").send_keys("1")
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editUOM")).select_by_visible_text("EA")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").click()
		if not self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").is_selected():
			self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_chk_editIsKit").click()
		wait.until(EC.visibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editSubkitRevision")))
		Select(self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_ddl_editSubkitRevision")).select_by_index(0)
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").clear()
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_txt_editDescription").send_keys("1")
		self.browser.find_element_by_id("ctl00_ContentPlaceHolder1_EditGridView_ctl02_imb_update").click()
		wait.until(EC.invisibility_of_element_located((By.ID, "ctl00_ContentPlaceHolder1_img_loading")))
		wait.until(lambda driver: self.browser.find_elements_by_css_selector("table#ctl00_ContentPlaceHolder1_EditGridView.MyDataGridCaption tbody tr.gridBody td")[1].get_attribute("textContent").strip() == "SKTEST3")
		db_now = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST'")
		self.assertTrue(len(db_now) > len(db_before), msg="testUpdateToSameKitifferentRevision: db now is not equal than db before")
		current = helper.executeSelect("select * from kit_piece_part_list where master_pn='SKTEST' and parent_pn='SKTEST' and pn='SKTEST3'")
		self.assertTrue(current[0].revision == -4611686018427387904, msg="testUpdateToSameKitifferentRevision: not the revision we are looking for")
		if len(self.browser.window_handles) > 1:
			self.browser.switch_to.window(self.browser.window_handles[1])
			self.browser.close()
			self.browser.switch_to.window(self.browser.window_handles[0])

	def tearDown(self):
		helper = TestHelper()
		helper.dbEstablishConnection()
		if helper.dbTestConnection() == False:
			return
		helper.deleteKitList("SKTEST")
		helper.deleteKitList("SKTEST2")
		helper.deleteKitList("SKTEST3")
		helper.dbCloseConnection()